<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Brainf**k on Manas Mahale</title>
    <link>https://manasmahale.xyz/tags/brainfk/</link>
    <description>Recent content in Brainf**k on Manas Mahale</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 19 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://manasmahale.xyz/tags/brainfk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ü¶Ä RayTracer ‚¶Ç‚¶Ç Operator Overloading ü¶Ä</title>
      <link>https://manasmahale.xyz/posts/rust-4/</link>
      <pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://manasmahale.xyz/posts/rust-4/</guid>
      <description>0Ô∏è‚É£ Installing Dependancies 1 2 3 4 5 # Cargo.toml [dependencies] assert_approx_eq = &amp;#34;1.1.0&amp;#34; rand = &amp;#34;0.8.4&amp;#34; 1Ô∏è‚É£ Import 1 2 3 4 5 use rand::Rng; use std::{f64, cmp::PartialEq, ops::{Add, Div, Mul, Neg, Sub}}; #[cfg(test)] use assert_approx_eq::assert_approx_eq; 2Ô∏è‚É£ 1 2 3 4 5 6 #[derive(Debug, Clone, Copy)] pub struct Vec3D { x: f64, y: f64, z: f64, } 3Ô∏è‚É£ Implementing Operators 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 impl Vec3D { pub fn new(x: f64, y: f64, z: f64) -&amp;gt; Vec3D { Vec3D { x, y, z } } pub fn random(min: f64, max: f64) -&amp;gt; Vec3D { let mut rng = rand::thread_rng(); Vec3D::new( rng.</description>
    </item>
    
    <item>
      <title>ü¶Ä Rust ‚¶Ç‚¶Ç Brainf**k Interpreter ü¶Ä</title>
      <link>https://manasmahale.xyz/posts/rust-3/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://manasmahale.xyz/posts/rust-3/</guid>
      <description>History Brainf**k hereafter referred to as BF, is a turing complete, esoteric programming language created by Urban M√ºller. For the uninitiated, esoteric languages are programming languages that are designed specifically to be unique, difficult to program in, or be just plain weird.
Crash Course in BF OpCode Instruction &amp;gt; Increment the data pointer &amp;lt; Decrement the data pointer [ If the byte at the data pointer is zero, jump instruction pointer forward to the command after the matching ] command ] If the byte at the data pointer is nonzero, move instruction pointer to the command after the matching [ command , One byte Input at the data pointer .</description>
    </item>
    
  </channel>
</rss>
